diff --git a/nvidia-uvm/uvm8_channel_test.c b/nvidia-uvm/uvm8_channel_test.c
index eafcf85..0bd1540 100644
--- a/nvidia-uvm/uvm8_channel_test.c
+++ b/nvidia-uvm/uvm8_channel_test.c
@@ -40,7 +40,7 @@
 // increment a counter into an adjacent memory location in a buffer. And then
 // verify that all the values are correct on the CPU.
 // GK110+ is required for the CE semaphore reduction method.
-NV_STATUS test_ordering(uvm_va_space_t *va_space)
+static NV_STATUS test_ordering(uvm_va_space_t *va_space)
 {
     NV_STATUS status;
     uvm_gpu_t *gpu;
@@ -295,12 +295,12 @@ static void set_counter(uvm_push_t *push, uvm_rm_mem_t *counter_mem, NvU32 value
     gpu->ce_hal->memset_v_4(push, counter_gpu_va, value, count * sizeof(NvU32));
 }
 
-uvm_channel_type_t random_channel_type(uvm_test_rng_t *rng)
+static uvm_channel_type_t random_channel_type(uvm_test_rng_t *rng)
 {
     return (uvm_channel_type_t)uvm_test_rng_range_32(rng, 0, UVM_CHANNEL_TYPE_COUNT - 1);
 }
 
-uvm_gpu_t *random_gpu(uvm_test_rng_t *rng, uvm_processor_mask_t *mask)
+static uvm_gpu_t *random_gpu(uvm_test_rng_t *rng, uvm_processor_mask_t *mask)
 {
     uvm_gpu_t *gpu;
     NvU32 gpu_count = uvm_processor_mask_get_gpu_count(mask);
@@ -314,7 +314,7 @@ uvm_gpu_t *random_gpu(uvm_test_rng_t *rng, uvm_processor_mask_t *mask)
 }
 
 
-void test_memset_rm_mem(uvm_push_t *push, uvm_rm_mem_t *rm_mem, NvU32 value)
+static void test_memset_rm_mem(uvm_push_t *push, uvm_rm_mem_t *rm_mem, NvU32 value)
 {
     uvm_gpu_t *gpu;
     NvU64 gpu_va;
@@ -336,7 +336,7 @@ void test_memset_rm_mem(uvm_push_t *push, uvm_rm_mem_t *rm_mem, NvU32 value)
 // threads and contains some schedule() calls to help get as many threads
 // through the init phase before other threads continue. It also has a random
 // schedule() call in the main loop scheduling GPU work.
-NV_STATUS stress_test_all_gpus_in_va(uvm_va_space_t *va_space, NvU32 num_streams, NvU32 iterations_per_stream,
+static NV_STATUS stress_test_all_gpus_in_va(uvm_va_space_t *va_space, NvU32 num_streams, NvU32 iterations_per_stream,
                                      NvU32 seed, NvU32 verbose)
 {
     NV_STATUS status = NV_OK;
