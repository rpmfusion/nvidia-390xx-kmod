--- a/kernel/nvidia/os-interface.c
+++ b/kernel/nvidia/os-interface.c
@@ -13,6 +13,7 @@
 
 #include "os-interface.h"
 #include "nv-linux.h"
+#include <linux/version.h>
 
 #include "nv-gpu-numa.h"
 
@@ -1697,7 +1698,11 @@ void NV_API_CALL os_free_pages_phys
 
 struct nv_ipmi_softc
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 19, 0)
     ipmi_user_t         p_user;     // ptr to ipmi_msghandler user structure
+#else
+    struct ipmi_user    *p_user;
+#endif
     spinlock_t          msg_lock;
     struct list_head    msgs;
     NvU32               seqNum;     //request sequence number
@@ -1706,7 +1711,11 @@ struct nv_ipmi_softc
 static inline int
 nv_ipmi_set_my_address
 (
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 19, 0)
     ipmi_user_t     user,
+#else
+    struct ipmi_user *user,
+#endif
     unsigned char   address
 )
 {
--- a/kernel/nvidia-drm/nvidia-drm-gem-nvkms-memory.c
+++ b/kernel/nvidia-drm/nvidia-drm-gem-nvkms-memory.c
@@ -20,6 +20,8 @@
  * DEALINGS IN THE SOFTWARE.
  */
 
+#include <linux/version.h>
+
 #include "nvidia-drm-conftest.h"
 
 #if defined(NV_DRM_ATOMIC_MODESET_AVAILABLE)
@@ -237,7 +239,11 @@ static int __nv_drm_vma_fault(struct vm_
 
     page_offset = vmf->pgoff - drm_vma_node_start(&gem->vma_node);
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 19, 0)
     ret = vm_insert_pfn(vma, address, pfn + page_offset);
+#else
+    ret = vmf_insert_pfn(vma, address, pfn + page_offset);
+#endif
 
     switch (ret) {
         case 0:
