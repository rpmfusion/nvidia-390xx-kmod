From 60fa39521a53de0c0cb989f31d8caabbb030aeb2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Nicolas=20Vi=C3=A9ville?= <nicolas.vieville@uphf.fr>
Date: Wed, 18 Jun 2025 13:00:15 +0200
Subject: [PATCH] Linux 6.15: switch vm_flags_set and vm_flags_clear calls
 which are GPL-only symbols to vm_flags_reset, related to commit "mm: uninline
 the main body of vma_start_write()" (Suren Baghdasaryan, 13 Feb 2025)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Nicolas Vi√©ville <nicolas.vieville@uphf.fr>
---
 kernel/common/inc/nv-mm.h | 29 +++++++++++++++++++++++++++++
 kernel/nvidia-uvm/uvm8.c  |  2 +-
 kernel/nvidia/nv-mmap.c   | 12 ++++++------
 3 files changed, 36 insertions(+), 7 deletions(-)

diff --git a/kernel/common/inc/nv-mm.h b/kernel/common/inc/nv-mm.h
index 86bf603..267e6d8 100644
--- a/kernel/common/inc/nv-mm.h
+++ b/kernel/common/inc/nv-mm.h
@@ -23,6 +23,7 @@
 #ifndef __NV_MM_H__
 #define __NV_MM_H__
 
+#include <linux/version.h>
 #include "conftest.h"
 
 #if !defined(NV_VM_FAULT_T_IS_PRESENT)
@@ -203,4 +204,32 @@ static inline struct rw_semaphore *nv_mmap_get_lock(struct mm_struct *mm)
 #endif
 }
 
+static inline void nv_vm_flags_set(struct vm_area_struct *vma, vm_flags_t flags)
+{
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+    // Related to commit "mm: uninline the main body of vma_start_write()"
+    // (Suren Baghdasaryan, 13 Feb 2025)
+    // Since Linux 6.15, vm_flags_set and vm_flags_clear call a GPL-only symbol
+    // for locking (__vma_start_write), which can't be called from non-GPL code.
+    // However, it appears all uses on the driver are on VMAs being initially
+    // mapped and which are already locked, so we can use vm_flags_reset, which
+    // doesn't lock the VMA, but rather just asserts it is already write-locked.
+    vm_flags_reset(vma, vma->vm_flags | flags);
+#else
+    vm_flags_set(vma, flags);
+#endif
+}
+
+static inline void nv_vm_flags_clear(struct vm_area_struct *vma, vm_flags_t flags)
+{
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
+    // Rel. commit "mm: uninline the main body of vma_start_write()"
+    // (Suren Baghdasaryan, 13 Feb 2025)
+    // See above
+    vm_flags_reset(vma, vma->vm_flags & ~flags);
+#else
+    vm_flags_clear(vma, flags);
+#endif
+}
+
 #endif // __NV_MM_H__
diff --git a/kernel/nvidia-uvm/uvm8.c b/kernel/nvidia-uvm/uvm8.c
index c68d471..3245521 100644
--- a/kernel/nvidia-uvm/uvm8.c
+++ b/kernel/nvidia-uvm/uvm8.c
@@ -661,7 +661,7 @@ static int uvm_mmap(struct file *filp, struct vm_area_struct *vma)
 #if LINUX_VERSION_CODE < KERNEL_VERSION(6, 3, 0)
     vma->vm_flags |= VM_MIXEDMAP | VM_DONTEXPAND;
 #else
-    vm_flags_set(vma, VM_MIXEDMAP | VM_DONTEXPAND);
+    nv_vm_flags_set(vma, VM_MIXEDMAP | VM_DONTEXPAND);
 #endif
 
     vma->vm_ops = &uvm_vm_ops_managed;
diff --git a/kernel/nvidia/nv-mmap.c b/kernel/nvidia/nv-mmap.c
index 1888985..38d0105 100644
--- a/kernel/nvidia/nv-mmap.c
+++ b/kernel/nvidia/nv-mmap.c
@@ -451,7 +451,7 @@ int nvidia_mmap_helper(
 #if LINUX_VERSION_CODE < KERNEL_VERSION(6, 3, 0)
             vma->vm_flags |= VM_MIXEDMAP;
 #else
-            vm_flags_set(vma, VM_MIXEDMAP);
+            nv_vm_flags_set(vma, VM_MIXEDMAP);
 #endif
 
             for (j = 0; j < pages; j++)
@@ -479,7 +479,7 @@ int nvidia_mmap_helper(
 #if LINUX_VERSION_CODE < KERNEL_VERSION(6, 3, 0)
         vma->vm_flags |= VM_IO;
 #else
-        vm_flags_set(vma, VM_IO);
+        nv_vm_flags_set(vma, VM_IO);
 #endif
     }
     else
@@ -546,8 +546,8 @@ int nvidia_mmap_helper(
         vma->vm_flags |= (VM_IO | VM_LOCKED | VM_RESERVED);
         vma->vm_flags |= (VM_DONTEXPAND | VM_DONTDUMP);
 #else
-        vm_flags_set(vma, VM_IO | VM_LOCKED | VM_RESERVED);
-        vm_flags_set(vma, VM_DONTEXPAND | VM_DONTDUMP);
+        nv_vm_flags_set(vma, VM_IO | VM_LOCKED | VM_RESERVED);
+        nv_vm_flags_set(vma, VM_DONTEXPAND | VM_DONTDUMP);
 #endif
     }
 
@@ -558,8 +558,8 @@ int nvidia_mmap_helper(
         vma->vm_flags &= ~VM_WRITE;
         vma->vm_flags &= ~VM_MAYWRITE;
 #else
-        vm_flags_clear(vma, VM_WRITE);
-        vm_flags_clear(vma, VM_MAYWRITE);
+        nv_vm_flags_clear(vma, VM_WRITE);
+        nv_vm_flags_clear(vma, VM_MAYWRITE);
 #endif
     }
 
-- 
2.49.0

