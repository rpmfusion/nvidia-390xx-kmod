--- a/kernel/nvidia-drm/nvidia-drm-gem-nvkms-memory.c
+++ b/kernel/nvidia-drm/nvidia-drm-gem-nvkms-memory.c
@@ -29,6 +29,8 @@
 
 #include "nv-mm.h"
 
+#include <linux/version.h>
+
 static void __nv_drm_gem_nvkms_memory_free(struct nv_drm_gem_object *nv_gem)
 {
     struct nv_drm_device *nv_dev = nv_gem->nv_dev;
@@ -268,7 +270,11 @@ static int __nv_drm_vma_fault(struct vm_
  */
 
 #if defined(NV_VM_OPS_FAULT_REMOVED_VMA_ARG)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 1, 0)
 static int nv_drm_vma_fault(struct vm_fault *vmf)
+#else
+static vm_fault_t nv_drm_vma_fault(struct vm_fault *vmf)
+#endif
 {
     return __nv_drm_vma_fault(vmf->vma, vmf);
 }
--- a/kernel/nvidia-drm/nvidia-drm-connector.c
+++ b/kernel/nvidia-drm/nvidia-drm-connector.c
@@ -35,6 +35,8 @@
 #include <drm/drm_atomic.h>
 #include <drm/drm_atomic_helper.h>
 
+#include <linux/version.h>
+
 static void nv_drm_connector_destroy(struct drm_connector *connector)
 {
     struct nv_drm_connector *nv_connector = to_nv_connector(connector);
@@ -201,6 +203,12 @@ nv_drm_connector_detect(struct drm_conne
     return __nv_drm_connector_detect_internal(connector);
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 1, 0)
+int drm_helper_probe_single_connector_modes(struct drm_connector
+                                            *connector, uint32_t maxX,
+                                            uint32_t maxY);
+#endif
+
 static struct drm_connector_funcs nv_connector_funcs = {
 #if defined NV_DRM_ATOMIC_HELPER_CONNECTOR_DPMS_PRESENT
     .dpms                   = drm_atomic_helper_connector_dpms,
--- a/kernel/nvidia-drm/nvidia-drm-encoder.c
+++ b/kernel/nvidia-drm/nvidia-drm-encoder.c
@@ -36,6 +36,12 @@
 #include <drm/drm_atomic.h>
 #include <drm/drm_atomic_helper.h>
 
+#include <linux/version.h>
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 1, 0)
+void drm_kms_helper_hotplug_event(struct drm_device *dev);
+#endif
+
 static void nv_drm_encoder_destroy(struct drm_encoder *encoder)
 {
     struct nv_drm_encoder *nv_encoder = to_nv_encoder(encoder);
@@ -152,6 +158,12 @@ nv_drm_encoder_new(struct drm_device *de
     return &nv_encoder->base;
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 1, 0)
+int drm_helper_probe_single_connector_modes(struct drm_connector
+                                            *connector, uint32_t maxX,
+                                            uint32_t maxY);
+#endif
+
 /*
  * Add encoder for given NvKmsKapiDisplay
  */
--- a/kernel/nvidia-drm/nvidia-drm-drv.c
+++ b/kernel/nvidia-drm/nvidia-drm-drv.c
@@ -35,6 +35,15 @@
 #include "nvidia-drm-gem-nvkms-memory.h"
 #include "nvidia-drm-gem-user-memory.h"
 
+#include <linux/version.h>
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 1, 0)
+void drm_kms_helper_poll_init(struct drm_device *dev);
+void drm_kms_helper_poll_fini(struct drm_device *dev);
+bool drm_helper_hpd_irq_event(struct drm_device *dev);
+void drm_kms_helper_poll_disable(struct drm_device *dev);
+#endif
+
 #if defined(NV_DRM_AVAILABLE)
 
 #include "nvidia-drm-ioctl.h"
--- a/kernel/common/inc/nv-list-helpers.h
+++ b/kernel/common/inc/nv-list-helpers.h
@@ -23,6 +23,8 @@
 #ifndef __NV_LIST_HELPERS_H__
 #define __NV_LIST_HELPERS_H__
 
+#include <linux/version.h>
+
 #include <linux/list.h>
 #include "conftest.h"
 
@@ -91,8 +91,13 @@
         list_entry((pos)->member.next, typeof(*(pos)), member)
 #endif
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 1, 0)
 static inline int list_is_first(const struct list_head *list,
                                 const struct list_head *head)
+#else
+static inline int nv_list_is_first(const struct list_head *list,
+                                   const struct list_head *head)
+#endif
 {
     return list->prev == head;
 }
